[{"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/index.js":"1","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/store.js":"2","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/App.js":"3","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/index.js":"4","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/private/login.js":"5","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/contact/Contact.js":"6","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/company/Company.js":"7","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/user/User.js":"8","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/region/Region.js":"9","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/login/Login.js":"10","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/header/Header.js":"11","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/contact.js":"12","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/company.js":"13","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/region.js":"14","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/user.js":"15","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/company.js":"16","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/button/Button.js":"17","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/modal/Modal.js":"18","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/user.js":"19","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/index.js":"20","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/company.js":"21","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/util/localStorage.js":"22","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/user.js":"23","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/region.js":"24","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/region.js":"25","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/contact.js":"26","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/contact.js":"27"},{"size":434,"mtime":1615058761396,"results":"28","hashOfConfig":"29"},{"size":197,"mtime":1609954470804,"results":"30","hashOfConfig":"29"},{"size":1240,"mtime":1615608311894,"results":"31","hashOfConfig":"29"},{"size":336,"mtime":1614553718723,"results":"32","hashOfConfig":"29"},{"size":435,"mtime":1615060862613,"results":"33","hashOfConfig":"29"},{"size":2838,"mtime":1615611139162,"results":"34","hashOfConfig":"29"},{"size":6834,"mtime":1615425432301,"results":"35","hashOfConfig":"29"},{"size":6047,"mtime":1615419145491,"results":"36","hashOfConfig":"29"},{"size":7170,"mtime":1615419177311,"results":"37","hashOfConfig":"29"},{"size":1287,"mtime":1614741830761,"results":"38","hashOfConfig":"29"},{"size":826,"mtime":1614658792661,"results":"39","hashOfConfig":"29"},{"size":1002,"mtime":1615348915050,"results":"40","hashOfConfig":"29"},{"size":1114,"mtime":1615348902760,"results":"41","hashOfConfig":"29"},{"size":4829,"mtime":1615399100561,"results":"42","hashOfConfig":"29"},{"size":1033,"mtime":1615060820204,"results":"43","hashOfConfig":"29"},{"size":1503,"mtime":1615061506120,"results":"44","hashOfConfig":"29"},{"size":244,"mtime":1615267105965,"results":"45","hashOfConfig":"29"},{"size":279,"mtime":1614991328742,"results":"46","hashOfConfig":"29"},{"size":1685,"mtime":1615346586655,"results":"47","hashOfConfig":"29"},{"size":1003,"mtime":1615353761673,"results":"48","hashOfConfig":"29"},{"size":1568,"mtime":1615348272960,"results":"49","hashOfConfig":"29"},{"size":132,"mtime":1614660347524,"results":"50","hashOfConfig":"29"},{"size":1895,"mtime":1615348243406,"results":"51","hashOfConfig":"29"},{"size":3633,"mtime":1615399127488,"results":"52","hashOfConfig":"29"},{"size":4138,"mtime":1615352581141,"results":"53","hashOfConfig":"29"},{"size":1448,"mtime":1615611066783,"results":"54","hashOfConfig":"29"},{"size":1567,"mtime":1615348258195,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"105ppy0",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/index.js",[],["114","115"],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/store.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/App.js",["116"],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/index.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/private/login.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/contact/Contact.js",["117","118","119","120","121","122","123","124","125","126","127","128","129"],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/company/Company.js",["130","131","132","133"],"import React, { useEffect, useState, useMemo } from 'react';\nimport styles from './Company.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createCompany, deleteCompany, getCompanies, updateCompany } from '../../actions/company';\nimport Button from '../../components/common/button/Button';\nimport Modal from '../../components/common/modal/Modal';\n\nconst initCompany = () => ({ name: '', address: '', email: '', phone: '', city: '' })\n\nconst CompanyPage = () => {\n    const dispatch = useDispatch()\n    const regions = useSelector(state => state.region.regions)\n    const companies = useSelector(state => state.company.companies)\n    const [newCompany, setNewCompany] = useState(initCompany())\n    const [modalVisible, setModalVisible] = useState(false)\n    const [action, setAction] = useState('Crear nueva compañía')\n\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        setNewCompany(form => ({ ...form, [name]: value }))\n    }\n\n    const modalAction = () => setModalVisible(!modalVisible)\n\n    const onSubmit = (event) => {\n        event.preventDefault()\n        if (action === 'Crear nueva compañía') {\n            if(newCompany.city === ''){\n                alert(\"Seleccione una ciudad\")\n            } else {\n                dispatch(createCompany(newCompany))\n            } \n        } else {\n            dispatch(updateCompany(newCompany))\n        }\n        modalAction()\n    }\n\n    const changeToNewUser = () => { setAction('Crear nueva compañía'); setNewCompany(initCompany()); modalAction() }\n    const changeToUpdateUser = (company) => {\n        setNewCompany(company);\n        setAction('Actualizar compañía');\n        modalAction()\n    }\n\n    const companiesList = useMemo(() =>\n        companies.map(company =>\n        (\n            <div key={company._id} className={styles.row}><div className={styles.item}>{company.name}</div>\n                <div className={styles.item}>{company.address}</div>\n                <div className={styles.item}>{company.email}</div>\n                <div className={styles.item}>{company.phone}</div>\n                <div className={styles.item}>{company.city}</div>\n                <div className={`${styles.item} ${styles.actionsContainer}`}>\n                    <i className={`fa fa-trash ${styles.action}`} onClick={() => dispatch(deleteCompany(company._id))}></i>\n                    <i className={`fa fa-pencil ${styles.action}`} onClick={() => changeToUpdateUser(company)}></i>\n                </div>\n            </div>)\n        ), [companies])\n\n    useEffect(() => {\n        dispatch(getCompanies())\n    }, [])\n\n    const cities = useMemo(() => {\n        if (regions.length > 0) {\n            const cities2 = regions.reduce((previous, current) => {\n                const cities1 = []\n                if (current.countries.length > 0) {\n                    current.countries.forEach((country) => {\n                        if (country.cities.length > 0) {\n                            const y = country.cities\n                            const x = [].concat(y)\n                            const u = cities1.push(...x)\n                        }\n                    })\n                }\n                return [...previous, ...cities1]\n            }, [])\n            return cities2\n        } else {\n            return []\n        }\n    }, [])\n\n    return (\n        <main className={styles.name}>\n            <section className={styles.userSection}>\n                <div className={styles.titleContainer}>\n                    <h1 className={styles.title}>Compañías</h1>\n                    <Button title={\"Nueva compañía\"} func={changeToNewUser} />\n                </div>\n                <div className={styles.table}>\n                    <div className={styles.row}>\n                        <div className={`${styles.item} ${styles.header}`}>Nombre</div>\n                        <div className={`${styles.item} ${styles.header}`}>Dirección</div>\n                        <div className={`${styles.item} ${styles.header}`}>Email</div>\n                        <div className={`${styles.item} ${styles.header}`}>Teléfono</div>\n                        <div className={`${styles.item} ${styles.header}`}>Ciudad</div>\n                        <div className={`${styles.item} ${styles.header}`}>Acciones</div>\n                    </div>\n                    {companiesList.length > 0 ? companiesList : <div className={styles.empty}>No hay Compañías creadas</div>}\n                </div>\n            </section>\n            <Modal visible={modalVisible}>\n                <form onSubmit={onSubmit} className={styles.form}>\n                    <h1 className={styles.formTitle}>{action}</h1>\n                    <span onClick={() => { modalAction() }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"name\"} type={\"text\"} value={newCompany.name} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'address'}>Dirección:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"address\"} type={\"text\"} value={newCompany.address} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'email'}>Email:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"email\"} type={\"email\"} value={newCompany.email} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'phone'}>Teléfono:</label>\n                        <input className={styles.input} onChange={handleInputChange} name={\"phone\"} type={\"number\"} value={newCompany.phone} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'city'}>Ciudad:</label>\n                        <select className={styles.input} name='city' defaultValue={\"-\"} required={true} onChange={handleInputChange}>\n                            <option disabled value={\"-\"} >Ciudad</option>\n                            {cities.map((city) => <option key={city._id} value={city.name}>{city.name}</option>)}\n                        </select>\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default CompanyPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/user/User.js",["134","135"],"import React, { useEffect, useMemo, useState } from 'react';\nimport styles from './User.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createUser, deleteUser, getUsers, updateUser, } from '../../actions/user';\nimport Button from '../../components/common/button/Button';\nimport Modal from '../../components/common/modal/Modal';\n\nconst initUser = () => ({ name: '', lastname: '', email: '', password: '', admin: false })\n\nconst UserPage = () => {\n    const dispatch = useDispatch()\n    const { users, user } = useSelector(state => state.auth)\n    const [newUser, setNewUser] = useState(initUser())\n    const [confirmPass, setConfirmPass] = useState('')\n    const [modalVisible, setModalVisible] = useState(false)\n    const [action, setAction] = useState('Crear nuevo usuario')\n\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        setNewUser(form => { return { ...form, [name]: value } })\n    }\n\n    const modalAction = () => setModalVisible(!modalVisible)\n\n    const onSubmit = (event) => {\n        event.preventDefault()\n        if (confirmPass !== newUser.password) {\n            alert(\"Las contraseñas no coinciden\")\n        } else {\n            if (action === 'Crear nuevo usuario') {\n                dispatch(createUser(newUser))\n            } else {\n                dispatch(updateUser(newUser))\n            }\n            modalAction()\n        }\n    }\n\n    const onConfirmPassChange = evt => setConfirmPass(evt.target.value)\n    const changeToNewUser = () => { setAction('Crear nuevo usuario'); setNewUser(initUser()); modalAction() }\n    const changeToUpdateUser = (user) => {\n        setNewUser(user);\n        setAction('Actualizar usuario');\n        modalAction()\n    }\n\n    const userList = useMemo(() =>\n        users.map(userS => (\n            <div key={userS._id} className={styles.row}><div className={styles.item}>{userS.name}</div>\n                <div className={styles.item}>{userS.lastname}</div>\n                <div className={styles.item}>{userS.email}</div>\n                <div className={styles.item}>{userS.admin ? \"Admin\" : \"Básico\"}</div>\n                <div className={`${styles.item} ${styles.actionsContainer}`}>{user.admin ? <><i className={`fa fa-trash ${styles.action}`} onClick={() => dispatch(deleteUser(userS._id))}></i> <i className={`fa fa-pencil ${styles.action}`} onClick={() => changeToUpdateUser(userS)}></i></> : \"-\"}</div>\n            </div>)\n\n        ), [users])\n\n    useEffect(() => {\n        dispatch(getUsers())\n    }, [])\n\n    return (\n        <main className={styles.name}>\n            <section className={styles.userSection}>\n                <div className={styles.titleContainer}>\n                    <h1 className={styles.title}>Usuarios</h1>\n                    <Button title={\"Nuevo usuario\"} func={changeToNewUser} />\n                </div>\n                <div className={styles.table}>\n                    <div className={styles.row}>\n                        <div className={`${styles.item} ${styles.header}`}>Nombre</div>\n                        <div className={`${styles.item} ${styles.header}`}>Apellido</div>\n                        <div className={`${styles.item} ${styles.header}`}>Email</div>\n                        <div className={`${styles.item} ${styles.header}`}>Perfil</div>\n                        <div className={`${styles.item} ${styles.header}`}>Acciones</div>\n                    </div>\n                    {userList.length > 0 ? userList : <div className={styles.empty}>No hay usuarios creados</div>}\n                </div>\n            </section>\n            <Modal visible={modalVisible}>\n                <form onSubmit={onSubmit} className={styles.form}>\n                    <h1 className={styles.formTitle}>{action}</h1>\n                    <span onClick={() => { modalAction() }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"name\"} type={\"text\"} value={newUser.name} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'lastname'}>Apellido:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"lastname\"} type={\"text\"} value={newUser.lastname} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'email'}>Email:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"email\"} type={\"email\"} value={newUser.email} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'admin'}>Administrador:</label>\n                        <input className={styles.input} onChange={handleInputChange} name={\"admin\"} type={\"checkbox\"} value={newUser.admin} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'password'}>Contraseña:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"password\"} type={\"password\"} value={newUser.password} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label>Repetir contraseña:</label>\n                        <input required={true} className={styles.input} onChange={onConfirmPassChange} type={\"password\"} value={confirmPass} />\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default UserPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/region/Region.js",["136","137"],"import React, { useEffect, useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createCity, createCountry, createRegion, deleteCity, deleteCountry, deleteRegion, getRegions, updateCity, updateCountry, updateRegion } from '../../actions/region';\nimport Button from '../../components/common/button/Button';\nimport styles from './Region.module.css';\nimport Modal from '../../components/common/modal/Modal';\n\nconst RegionPage = () => {\n\n    const dispatch = useDispatch()\n    const regions = useSelector(state => state.region.regions)\n    const [modalRegion, setModalRegion] = useState(false)\n\n    const [name, setName] = useState('')\n    const [regionAction, setRegionAction] = useState('Nueva región')\n    const [regionToEdit, setRegionToEdit] = useState(null)\n\n    const changeToNewRegion = () => {\n        setModalRegion(true)\n        setRegionAction('Nueva región')\n    }\n\n    const changeToUpdateRegion = (region) => {\n        setModalRegion(true)\n        setRegionAction('Editar región')\n        setRegionToEdit(region)\n    }\n\n    const changeToNewCountry = (regionId) => {\n        setModalRegion(true)\n        setRegionAction('Nuevo país')\n        setRegionToEdit({ _id: regionId })\n    }\n\n    const changeToUpdateCountry = (regionId, countryId) => {\n        setModalRegion(true)\n        setRegionAction('Editar país')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId } })\n    }\n\n    const changeToNewCity = (regionId, countryId) => {\n        setModalRegion(true)\n        setRegionAction('Nueva ciudad')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId } })\n    }\n\n    const changeToUpdateCity = (regionId, countryId, cityId) => {\n        setModalRegion(true)\n        setRegionAction('Editar ciudad')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId, city: { _id: cityId } } })\n    }\n\n    const submitRegion = (event) => {\n        event.preventDefault()\n        if (regionAction === 'Nueva región') {\n            dispatch(createRegion({ name: name }))\n        } else if (regionAction === 'Nuevo país') {\n            dispatch(createCountry({ ...regionToEdit, country: { name: name } }))\n        } else if (regionAction === 'Nueva ciudad') {\n            dispatch(createCity({ ...regionToEdit, country: { ...regionToEdit.country, city: { name: name, code: name.toLowerCase().slice(0, 3) } } }))\n        } else if (regionAction === 'Editar región') {\n            dispatch(updateRegion({ ...regionToEdit, name: name }))\n        } else if (regionAction === 'Editar país') {\n            dispatch(updateCountry({ _id: regionToEdit._id, country: { _id: regionToEdit.country._id, name: name } }))\n        } else if (regionAction === 'Editar ciudad') {\n            dispatch(updateCity({ _id: regionToEdit._id, country: { _id: regionToEdit.country._id, city: { _id: regionToEdit.country.city._id, name: name, code: name.toLowerCase().slice(0, 3) } } }))\n        }\n        setName('')\n        setModalRegion(false)\n    }\n\n    const onNameChange = (event) => setName(event.target.value)\n\n    const regionsList = useMemo(() => (\n        regions.map(region => (\n            <li key={region._id} style={{ margin: '20px 0' }}>\n                <div className={styles.nameWithButton} style={{ margin: '10px 0' }}>\n                    <div className={styles.countryButtons}>\n                        <p className={styles.regionP}>{region.name}</p>\n                        <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateRegion(region)} />\n                        <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteRegion(region._id))} />\n                    </div>\n                    <Button title={'Añadir país'} style={{ opacity: 0.8 }} func={() => changeToNewCountry(region._id)} />\n                </div>\n                {region.countries.map(country => (\n                    <div style={{ marginLeft: 40 }} key={country._id}>\n                        <div className={styles.countryButtonsContainer} style={{ margin: '10px 0 ' }}>\n                            <div className={styles.countryButtons}>\n                                <p className={styles.countryP}>{country.name}</p>\n                                <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateCountry(region._id, country._id)} />\n                                <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteCountry(region._id, country._id))} />\n                            </div>\n                            <Button title={'Añadir ciudad'} style={{ opacity: 0.5 }} func={() => changeToNewCity(region._id, country._id)} />\n                        </div>\n                        {country.cities.map(city => (\n                            <div style={{ margin: '10px 40px' }} key={city._id} className={styles.countryButtons}>\n                                <p className={styles.cityP}>{city.name}</p>\n                                <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateCity(region._id, country._id, city._id)} />\n                                <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteCity(region._id, country._id, city._id))} />\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </li>\n        ))\n    ), [regions])\n\n    useEffect(() => {\n        dispatch(getRegions())\n    }, [])\n\n    return (\n        <main className={styles.main}>\n            <div className={styles.titleContainer}>\n                <h1 className={styles.title}>Regiones</h1>\n                <Button title={'Agregar región'} func={changeToNewRegion} />\n            </div>\n            <ul>\n                {regionsList.length > 0 ? regionsList : <div className={styles.empty}>No hay Regiones creadas</div>}\n            </ul>\n            <Modal visible={modalRegion}>\n                <form onSubmit={submitRegion} className={styles.form}>\n                    <h1 className={styles.formTitle}>{regionAction}</h1>\n                    <span onClick={() => { setModalRegion(false) }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={onNameChange} name={\"name\"} type={\"text\"} value={name} />\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default RegionPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/login/Login.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/header/Header.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/contact.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/region.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/button/Button.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/modal/Modal.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/index.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/util/localStorage.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/region.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/region.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/contact.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/contact.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":19,"column":6,"nodeType":"144","endLine":19,"endColumn":12,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":13},{"ruleId":"146","severity":1,"message":"150","line":5,"column":10,"nodeType":"148","messageId":"149","endLine":5,"endColumn":23},{"ruleId":"146","severity":1,"message":"151","line":5,"column":25,"nodeType":"148","messageId":"149","endLine":5,"endColumn":38},{"ruleId":"146","severity":1,"message":"152","line":5,"column":53,"nodeType":"148","messageId":"149","endLine":5,"endColumn":66},{"ruleId":"142","severity":1,"message":"153","line":10,"column":43,"nodeType":"144","endLine":10,"endColumn":53,"suggestions":"154"},{"ruleId":"142","severity":1,"message":"143","line":14,"column":8,"nodeType":"144","endLine":14,"endColumn":10,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":22,"column":21,"nodeType":"158","endLine":22,"endColumn":81},{"ruleId":"156","severity":1,"message":"157","line":25,"column":21,"nodeType":"158","endLine":25,"endColumn":121},{"ruleId":"156","severity":1,"message":"157","line":33,"column":81,"nodeType":"158","endLine":33,"endColumn":140},{"ruleId":"156","severity":1,"message":"157","line":34,"column":84,"nodeType":"158","endLine":34,"endColumn":143},{"ruleId":"156","severity":1,"message":"157","line":35,"column":81,"nodeType":"158","endLine":35,"endColumn":140},{"ruleId":"156","severity":1,"message":"157","line":36,"column":78,"nodeType":"158","endLine":36,"endColumn":137},{"ruleId":"156","severity":1,"message":"157","line":38,"column":80,"nodeType":"158","endLine":38,"endColumn":139},{"ruleId":"142","severity":1,"message":"159","line":61,"column":12,"nodeType":"144","endLine":61,"endColumn":23,"suggestions":"160"},{"ruleId":"142","severity":1,"message":"143","line":65,"column":8,"nodeType":"144","endLine":65,"endColumn":10,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"162","line":76,"column":35,"nodeType":"148","messageId":"149","endLine":76,"endColumn":36},{"ruleId":"142","severity":1,"message":"163","line":86,"column":8,"nodeType":"144","endLine":86,"endColumn":10,"suggestions":"164"},{"ruleId":"142","severity":1,"message":"165","line":58,"column":12,"nodeType":"144","endLine":58,"endColumn":19,"suggestions":"166"},{"ruleId":"142","severity":1,"message":"143","line":62,"column":8,"nodeType":"144","endLine":62,"endColumn":10,"suggestions":"167"},{"ruleId":"142","severity":1,"message":"168","line":106,"column":8,"nodeType":"144","endLine":106,"endColumn":17,"suggestions":"169"},{"ruleId":"142","severity":1,"message":"143","line":110,"column":8,"nodeType":"144","endLine":110,"endColumn":10,"suggestions":"170"},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["173"],"no-unused-vars","'Modal' is defined but never used.","Identifier","unusedVar","'createContact' is defined but never used.","'deleteContact' is defined but never used.","'updateContact' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'contacts'. Either exclude it or remove the dependency array.",["174"],["175"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useMemo has missing dependencies: 'changeToUpdateUser' and 'dispatch'. Either include them or remove the dependency array.",["176"],["177"],"'u' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'regions'. Either include it or remove the dependency array.",["178"],"React Hook useMemo has missing dependencies: 'changeToUpdateUser', 'dispatch', and 'user.admin'. Either include them or remove the dependency array.",["179"],["180"],"React Hook useMemo has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["181"],["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"187","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"187","fix":"196"},{"desc":"197","fix":"198"},{"desc":"187","fix":"199"},"Update the dependencies array to be: [dispatch, user]",{"range":"200","text":"201"},"Update the dependencies array to be: []",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch]",{"range":"204","text":"205"},"Update the dependencies array to be: [changeToUpdateUser, companies, dispatch]",{"range":"206","text":"207"},{"range":"208","text":"205"},"Update the dependencies array to be: [regions]",{"range":"209","text":"210"},"Update the dependencies array to be: [changeToUpdateUser, dispatch, user.admin, users]",{"range":"211","text":"212"},{"range":"213","text":"205"},"Update the dependencies array to be: [dispatch, regions]",{"range":"214","text":"215"},{"range":"216","text":"205"},[710,716],"[dispatch, user]",[532,542],"[]",[606,608],"[dispatch]",[2618,2629],"[changeToUpdateUser, companies, dispatch]",[2694,2696],[3420,3422],"[regions]",[2582,2589],"[changeToUpdateUser, dispatch, user.admin, users]",[2650,2652],[5868,5877],"[dispatch, regions]",[5940,5942]]