[{"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/index.js":"1","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/store.js":"2","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/App.js":"3","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/index.js":"4","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/private/login.js":"5","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/contact/Contact.js":"6","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/company/Company.js":"7","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/user/User.js":"8","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/region/Region.js":"9","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/login/Login.js":"10","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/header/Header.js":"11","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/contact.js":"12","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/company.js":"13","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/region.js":"14","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/user.js":"15","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/company.js":"16","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/button/Button.js":"17","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/modal/Modal.js":"18","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/user.js":"19","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/index.js":"20","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/company.js":"21","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/util/localStorage.js":"22","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/user.js":"23","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/region.js":"24","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/region.js":"25","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/contact.js":"26","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/contact.js":"27","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/city.js":"28","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/city.js":"29"},{"size":434,"mtime":1615058761396,"results":"30","hashOfConfig":"31"},{"size":197,"mtime":1609954470804,"results":"32","hashOfConfig":"31"},{"size":1316,"mtime":1616027809002,"results":"33","hashOfConfig":"31"},{"size":393,"mtime":1616092134166,"results":"34","hashOfConfig":"31"},{"size":435,"mtime":1615060862613,"results":"35","hashOfConfig":"31"},{"size":20927,"mtime":1616818608613,"results":"36","hashOfConfig":"31"},{"size":6239,"mtime":1616115238410,"results":"37","hashOfConfig":"31"},{"size":6047,"mtime":1615419145491,"results":"38","hashOfConfig":"31"},{"size":7086,"mtime":1616092008674,"results":"39","hashOfConfig":"31"},{"size":1287,"mtime":1614741830761,"results":"40","hashOfConfig":"31"},{"size":826,"mtime":1614658792661,"results":"41","hashOfConfig":"31"},{"size":1287,"mtime":1616723553137,"results":"42","hashOfConfig":"31"},{"size":1014,"mtime":1616090893935,"results":"43","hashOfConfig":"31"},{"size":5847,"mtime":1616091500235,"results":"44","hashOfConfig":"31"},{"size":1033,"mtime":1615060820204,"results":"45","hashOfConfig":"31"},{"size":1468,"mtime":1616090872544,"results":"46","hashOfConfig":"31"},{"size":244,"mtime":1615267105965,"results":"47","hashOfConfig":"31"},{"size":279,"mtime":1614991328742,"results":"48","hashOfConfig":"31"},{"size":1685,"mtime":1615346586655,"results":"49","hashOfConfig":"31"},{"size":1090,"mtime":1616119059672,"results":"50","hashOfConfig":"31"},{"size":1568,"mtime":1615348272960,"results":"51","hashOfConfig":"31"},{"size":132,"mtime":1614660347524,"results":"52","hashOfConfig":"31"},{"size":1895,"mtime":1615348243406,"results":"53","hashOfConfig":"31"},{"size":3862,"mtime":1616091460467,"results":"54","hashOfConfig":"31"},{"size":4360,"mtime":1616092169400,"results":"55","hashOfConfig":"31"},{"size":2463,"mtime":1616723388300,"results":"56","hashOfConfig":"31"},{"size":2354,"mtime":1616553848811,"results":"57","hashOfConfig":"31"},{"size":356,"mtime":1616092488786,"results":"58","hashOfConfig":"31"},{"size":401,"mtime":1616094694799,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"105ppy0",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"62"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/index.js",[],["125","126"],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/store.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/App.js",["127"],"import React, { useEffect } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport LoginRoute from './private/login';\nimport ContactPage from './pages/contact/Contact';\nimport UserPage from './pages/user/User';\nimport CompanyPage from './pages/company/Company';\nimport RegionPage from './pages/region/Region';\nimport LoginPage from './pages/login/Login';\nimport Header from './components/common/header/Header';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getRegions } from './actions/region';\nimport { getCompanies } from './actions/company';\n\nconst App = () => {\n  const dispatch = useDispatch()\n  const user = useSelector(state => state.auth.user)\n\n  useEffect(() => {\n    if (user) dispatch(getRegions()); dispatch(getCompanies())\n  }, [user])\n\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path={'/'} >\n          {user ? <Redirect to={'/contact'} /> : <LoginPage />}\n        </Route>\n        <LoginRoute exact path={'/contact'} component={ContactPage} />\n        <LoginRoute exact path={'/user'} component={UserPage} />\n        <LoginRoute exact path={'/company'} component={CompanyPage} />\n        <LoginRoute exact path={'/region'} component={RegionPage} />\n        <Redirect to='/' />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/index.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/private/login.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/contact/Contact.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/company/Company.js",["145","146","147"],"import React, { useEffect, useState, useMemo } from 'react';\nimport styles from './Company.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createCompany, deleteCompany, getCompanies, updateCompany } from '../../actions/company';\nimport Button from '../../components/common/button/Button';\nimport Modal from '../../components/common/modal/Modal';\nimport { getCities } from '../../actions/city';\n\nconst initCompany = () => ({ name: '', address: '', email: '', phone: '', city: '' })\n\nconst CompanyPage = () => {\n    const dispatch = useDispatch()\n    const cities = useSelector(state => state.city.cities)\n    const companies = useSelector(state => state.company.companies)\n    const [newCompany, setNewCompany] = useState(initCompany())\n    const [modalVisible, setModalVisible] = useState(false)\n    const [action, setAction] = useState('Crear nueva compañía')\n\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        setNewCompany(form => ({ ...form, [name]: value }))\n    }\n\n    const modalAction = () => setModalVisible(!modalVisible)\n\n    const onSubmit = (event) => {\n        event.preventDefault()\n        if (action === 'Crear nueva compañía') {\n            if(newCompany.city === ''){\n                alert(\"Seleccione una ciudad\")\n            } else {\n                dispatch(createCompany(newCompany))\n            } \n        } else {\n            dispatch(updateCompany(newCompany))\n        }\n        modalAction()\n    }\n\n    const changeToNewUser = () => { setAction('Crear nueva compañía'); setNewCompany(initCompany()); modalAction() }\n    const changeToUpdateUser = (company) => {\n        setNewCompany(company);\n        setAction('Actualizar compañía');\n        modalAction()\n    }\n\n    const companiesList = useMemo(() =>\n        companies.map(company =>\n        (\n            <div key={company._id} className={styles.row}><div className={styles.item}>{company.name}</div>\n                <div className={styles.item}>{company.address}</div>\n                <div className={styles.item}>{company.email}</div>\n                <div className={styles.item}>{company.phone}</div>\n                <div className={styles.item}>{company.city ? company.city.name : ''}</div>\n                <div className={`${styles.item} ${styles.actionsContainer}`}>\n                    <i className={`fa fa-trash ${styles.action}`} onClick={() => dispatch(deleteCompany(company._id))}></i>\n                    <i className={`fa fa-pencil ${styles.action}`} onClick={() => changeToUpdateUser(company)}></i>\n                </div>\n            </div>)\n        ), [companies])\n\n    useEffect(() => {\n        dispatch(getCompanies())\n    }, [])\n\n    useEffect(() => {\n        dispatch(getCities())\n    },[])\n\n    return (\n        <main className={styles.name}>\n            <section className={styles.userSection}>\n                <div className={styles.titleContainer}>\n                    <h1 className={styles.title}>Compañías</h1>\n                    <Button title={\"Nueva compañía\"} func={changeToNewUser} />\n                </div>\n                <div className={styles.table}>\n                    <div className={styles.row}>\n                        <div className={`${styles.item} ${styles.header}`}>Nombre</div>\n                        <div className={`${styles.item} ${styles.header}`}>Dirección</div>\n                        <div className={`${styles.item} ${styles.header}`}>Email</div>\n                        <div className={`${styles.item} ${styles.header}`}>Teléfono</div>\n                        <div className={`${styles.item} ${styles.header}`}>Ciudad</div>\n                        <div className={`${styles.item} ${styles.header}`}>Acciones</div>\n                    </div>\n                    {companiesList.length > 0 ? companiesList : <div className={styles.empty}>No hay Compañías creadas</div>}\n                </div>\n            </section>\n            <Modal visible={modalVisible}>\n                <form onSubmit={onSubmit} className={styles.form}>\n                    <h1 className={styles.formTitle}>{action}</h1>\n                    <span onClick={() => { modalAction() }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"name\"} type={\"text\"} value={newCompany.name} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'address'}>Dirección:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"address\"} type={\"text\"} value={newCompany.address} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'email'}>Email:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"email\"} type={\"email\"} value={newCompany.email} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'phone'}>Teléfono:</label>\n                        <input className={styles.input} onChange={handleInputChange} name={\"phone\"} type={\"number\"} value={newCompany.phone} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'city'}>Ciudad:</label>\n                        <select className={styles.input} name='city' defaultValue={\"-\"} required={true} onChange={handleInputChange}>\n                            <option disabled value={\"-\"} >Ciudad</option>\n                            {cities.map((city) => <option key={city._id} value={city._id}>{city.name}</option>)}\n                        </select>\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default CompanyPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/user/User.js",["148","149"],"import React, { useEffect, useMemo, useState } from 'react';\nimport styles from './User.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createUser, deleteUser, getUsers, updateUser, } from '../../actions/user';\nimport Button from '../../components/common/button/Button';\nimport Modal from '../../components/common/modal/Modal';\n\nconst initUser = () => ({ name: '', lastname: '', email: '', password: '', admin: false })\n\nconst UserPage = () => {\n    const dispatch = useDispatch()\n    const { users, user } = useSelector(state => state.auth)\n    const [newUser, setNewUser] = useState(initUser())\n    const [confirmPass, setConfirmPass] = useState('')\n    const [modalVisible, setModalVisible] = useState(false)\n    const [action, setAction] = useState('Crear nuevo usuario')\n\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        setNewUser(form => { return { ...form, [name]: value } })\n    }\n\n    const modalAction = () => setModalVisible(!modalVisible)\n\n    const onSubmit = (event) => {\n        event.preventDefault()\n        if (confirmPass !== newUser.password) {\n            alert(\"Las contraseñas no coinciden\")\n        } else {\n            if (action === 'Crear nuevo usuario') {\n                dispatch(createUser(newUser))\n            } else {\n                dispatch(updateUser(newUser))\n            }\n            modalAction()\n        }\n    }\n\n    const onConfirmPassChange = evt => setConfirmPass(evt.target.value)\n    const changeToNewUser = () => { setAction('Crear nuevo usuario'); setNewUser(initUser()); modalAction() }\n    const changeToUpdateUser = (user) => {\n        setNewUser(user);\n        setAction('Actualizar usuario');\n        modalAction()\n    }\n\n    const userList = useMemo(() =>\n        users.map(userS => (\n            <div key={userS._id} className={styles.row}><div className={styles.item}>{userS.name}</div>\n                <div className={styles.item}>{userS.lastname}</div>\n                <div className={styles.item}>{userS.email}</div>\n                <div className={styles.item}>{userS.admin ? \"Admin\" : \"Básico\"}</div>\n                <div className={`${styles.item} ${styles.actionsContainer}`}>{user.admin ? <><i className={`fa fa-trash ${styles.action}`} onClick={() => dispatch(deleteUser(userS._id))}></i> <i className={`fa fa-pencil ${styles.action}`} onClick={() => changeToUpdateUser(userS)}></i></> : \"-\"}</div>\n            </div>)\n\n        ), [users])\n\n    useEffect(() => {\n        dispatch(getUsers())\n    }, [])\n\n    return (\n        <main className={styles.name}>\n            <section className={styles.userSection}>\n                <div className={styles.titleContainer}>\n                    <h1 className={styles.title}>Usuarios</h1>\n                    <Button title={\"Nuevo usuario\"} func={changeToNewUser} />\n                </div>\n                <div className={styles.table}>\n                    <div className={styles.row}>\n                        <div className={`${styles.item} ${styles.header}`}>Nombre</div>\n                        <div className={`${styles.item} ${styles.header}`}>Apellido</div>\n                        <div className={`${styles.item} ${styles.header}`}>Email</div>\n                        <div className={`${styles.item} ${styles.header}`}>Perfil</div>\n                        <div className={`${styles.item} ${styles.header}`}>Acciones</div>\n                    </div>\n                    {userList.length > 0 ? userList : <div className={styles.empty}>No hay usuarios creados</div>}\n                </div>\n            </section>\n            <Modal visible={modalVisible}>\n                <form onSubmit={onSubmit} className={styles.form}>\n                    <h1 className={styles.formTitle}>{action}</h1>\n                    <span onClick={() => { modalAction() }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"name\"} type={\"text\"} value={newUser.name} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'lastname'}>Apellido:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"lastname\"} type={\"text\"} value={newUser.lastname} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'email'}>Email:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"email\"} type={\"email\"} value={newUser.email} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'admin'}>Administrador:</label>\n                        <input className={styles.input} onChange={handleInputChange} name={\"admin\"} type={\"checkbox\"} value={newUser.admin} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'password'}>Contraseña:</label>\n                        <input required={true} className={styles.input} onChange={handleInputChange} name={\"password\"} type={\"password\"} value={newUser.password} />\n                    </div>\n                    <div className={styles.inputContainer}>\n                        <label>Repetir contraseña:</label>\n                        <input required={true} className={styles.input} onChange={onConfirmPassChange} type={\"password\"} value={confirmPass} />\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default UserPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/region/Region.js",["150","151"],"import React, { useEffect, useMemo, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { createCity, createCountry, createRegion, deleteCity, deleteCountry, deleteRegion, getRegions, updateCity, updateCountry, updateRegion } from '../../actions/region';\nimport Button from '../../components/common/button/Button';\nimport styles from './Region.module.css';\nimport Modal from '../../components/common/modal/Modal';\n\nconst RegionPage = () => {\n\n    const dispatch = useDispatch()\n    const regions = useSelector(state => state.region.regions)\n    const [modalRegion, setModalRegion] = useState(false)\n\n    const [name, setName] = useState('')\n    const [regionAction, setRegionAction] = useState('Nueva región')\n    const [regionToEdit, setRegionToEdit] = useState(null)\n\n    const changeToNewRegion = () => {\n        setModalRegion(true)\n        setRegionAction('Nueva región')\n    }\n\n    const changeToUpdateRegion = (region) => {\n        setModalRegion(true)\n        setRegionAction('Editar región')\n        setRegionToEdit(region)\n    }\n\n    const changeToNewCountry = (regionId) => {\n        setModalRegion(true)\n        setRegionAction('Nuevo país')\n        setRegionToEdit({ _id: regionId })\n    }\n\n    const changeToUpdateCountry = (regionId, countryId) => {\n        setModalRegion(true)\n        setRegionAction('Editar país')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId } })\n    }\n\n    const changeToNewCity = (regionId, countryId) => {\n        setModalRegion(true)\n        setRegionAction('Nueva ciudad')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId } })\n    }\n\n    const changeToUpdateCity = (regionId, countryId, cityId) => {\n        setModalRegion(true)\n        setRegionAction('Editar ciudad')\n        setRegionToEdit({ _id: regionId, country: { _id: countryId, city: { _id: cityId } } })\n    }\n\n    const submitRegion = (event) => {\n        event.preventDefault()\n        if (regionAction === 'Nueva región') {\n            dispatch(createRegion({ name: name }))\n        } else if (regionAction === 'Nuevo país') {\n            dispatch(createCountry(regionToEdit._id, { name: name }))\n        } else if (regionAction === 'Nueva ciudad') {\n            dispatch(createCity(regionToEdit._id, regionToEdit.country._id, { name: name, code: name.toLowerCase().slice(0, 3) }))\n        } else if (regionAction === 'Editar región') {\n            dispatch(updateRegion({ ...regionToEdit, name: name }))\n        } else if (regionAction === 'Editar país') {\n            dispatch(updateCountry(regionToEdit._id, { _id: regionToEdit.country._id, name: name }))\n        } else if (regionAction === 'Editar ciudad') {\n            dispatch(updateCity(regionToEdit._id, regionToEdit.country._id, { _id: regionToEdit.country.city._id, name: name, code: name.toLowerCase().slice(0, 3) }))\n        }\n        setName('')\n        setModalRegion(false)\n    }\n\n    const onNameChange = (event) => setName(event.target.value)\n\n    const regionsList = useMemo(() => (\n        regions.map(region => (\n            <li key={region._id} style={{ margin: '20px 0' }}>\n                <div className={styles.nameWithButton} style={{ margin: '10px 0' }}>\n                    <div className={styles.countryButtons}>\n                        <p className={styles.regionP}>{region.name}</p>\n                        <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateRegion(region)} />\n                        <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteRegion(region._id))} />\n                    </div>\n                    <Button title={'Añadir país'} style={{ opacity: 0.8 }} func={() => changeToNewCountry(region._id)} />\n                </div>\n                {region.countries.map(country => (\n                    <div style={{ marginLeft: 40 }} key={country._id}>\n                        <div className={styles.countryButtonsContainer} style={{ margin: '10px 0 ' }}>\n                            <div className={styles.countryButtons}>\n                                <p className={styles.countryP}>{country.name}</p>\n                                <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateCountry(region._id, country._id)} />\n                                <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteCountry(region._id, country._id))} />\n                            </div>\n                            <Button title={'Añadir ciudad'} style={{ opacity: 0.5 }} func={() => changeToNewCity(region._id, country._id)} />\n                        </div>\n                        {country.cities.map(city => (\n                            <div style={{ margin: '10px 40px' }} key={city._id} className={styles.countryButtons}>\n                                <p className={styles.cityP}>{city.name}</p>\n                                <Button style={{ width: 'max-content', backgroundColor: 'white', margin: '0px 5px 0px 20px', color: '#0683F9' }} title={'Editar'} func={() => changeToUpdateCity(region._id, country._id, city._id)} />\n                                <Button style={{ width: 'max-content', backgroundColor: 'red', margin: '0px 10px', color: 'white' }} title={'Eliminar'} func={() => dispatch(deleteCity(region._id, country._id, city._id))} />\n                            </div>\n                        ))}\n                    </div>\n                ))}\n            </li>\n        ))\n    ), [regions])\n\n    useEffect(() => {\n        dispatch(getRegions())\n    }, [])\n\n    return (\n        <main className={styles.main}>\n            <div className={styles.titleContainer}>\n                <h1 className={styles.title}>Regiones</h1>\n                <Button title={'Agregar región'} func={changeToNewRegion} />\n            </div>\n            <ul>\n                {regionsList.length > 0 ? regionsList : <div className={styles.empty}>No hay Regiones creadas</div>}\n            </ul>\n            <Modal visible={modalRegion}>\n                <form onSubmit={submitRegion} className={styles.form}>\n                    <h1 className={styles.formTitle}>{regionAction}</h1>\n                    <span onClick={() => { setModalRegion(false) }} style={{ position: 'absolute', right: 0, top: 0, margin: 30, cursor: 'pointer', fontSize: 30 }}>&times;</span>\n                    <div className={styles.inputContainer}>\n                        <label htmlFor={'name'}>Nombre:</label>\n                        <input required={true} className={styles.input} onChange={onNameChange} name={\"name\"} type={\"text\"} value={name} />\n                    </div>\n                    <Button title={'Guardar'} />\n                </form>\n            </Modal>\n        </main>\n    )\n}\n\nexport default RegionPage;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/pages/login/Login.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/header/Header.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/contact.js",["152"],"import { CREATE_CONTACT, DELETE_CONTACT, GET_CONTACTS, UPDATE_CONTACT, SELECT_CONTACT, DELETE_SELECTED_CONTACTS } from \"../actions/index\";\n\nconst contactInitial = {\n    contacts: []\n}\n\nconst contactReducer = (state = contactInitial, { type, contact, contactId, contacts, selected }) => {\n    switch (type) {\n        case CREATE_CONTACT:\n            return {\n                ...state,\n                contacts: [...state.contacts, contact]\n            }\n        case UPDATE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.map(currentContact => (currentContact._id === contact._id ? contact : currentContact))\n            }\n        case DELETE_CONTACT:\n            return {\n                ...state,\n                contacts: state.contacts.filter(currentContact => currentContact._id !== contactId)\n            }\n        case GET_CONTACTS:\n            return {\n                ...state,\n                contacts: contacts\n            }\n        case SELECT_CONTACT: {\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => (contact._id === contactId ? { ...contact, selected: selected } : contact))\n            }\n        }\n        default: return state\n    }\n}\n\nexport default contactReducer;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/region.js",["153"],"import { CREATE_CITY, CREATE_COUNTRY, CREATE_REGION, DELETE_CITY, DELETE_COUNTRY, DELETE_REGION, GET_REGIONS, UPDATE_CITY, UPDATE_COUNTRY, UPDATE_REGION } from \"../actions\";\n\nconst regionInitial = {\n    regions: []\n}\n\nconst regionReducer = (state = regionInitial, { type, region, regions, regionId, countryId, cityId, city, country }) => {\n    switch (type) {\n        case CREATE_REGION:\n            return {\n                ...state,\n                regions: [...state.regions, region]\n            }\n        case UPDATE_REGION:\n            return {\n                ...state,\n                regions: state.regions.map((currentRegion) => (currentRegion._id === region._id ? { ...currentRegion, name: region.name } : currentRegion))\n            }\n        case DELETE_REGION:\n            return {\n                ...state,\n                regions: state.regions.filter(currentRegion => currentRegion._id !== regionId)\n            }\n        case GET_REGIONS:\n            return {\n                ...state,\n                regions: regions\n            }\n        case CREATE_COUNTRY:\n            return {\n                ...state,\n                regions: state.regions.map((currentRegion) => {\n                    if (currentRegion._id === regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: [country, ...currentRegion.countries]\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        case UPDATE_COUNTRY:\n            return {\n                ...state,\n                regions: state.regions.map(currentRegion => {\n                    if (currentRegion._id === regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: currentRegion.countries.map(currentCountry => (currentCountry._id === country._id ? { ...currentCountry, name: country.name } : currentCountry))\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        case DELETE_COUNTRY:\n            return {\n                ...state,\n                regions: state.regions.map(currentRegion => {\n                    if (currentRegion._id === regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: currentRegion.countries.filter(currentCountry => currentCountry._id !== countryId)\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        case CREATE_CITY:\n            return {\n                ...state,\n                regions: state.regions.map((currentRegion) => {\n                    if (currentRegion._id == regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: currentRegion.countries.map(currentCountry => {\n                                if (currentCountry._id === countryId) {\n                                    return {\n                                        ...currentCountry,\n                                        cities: [city, ...currentCountry.cities]\n                                    }\n                                } else {\n                                    return currentCountry\n                                }\n                            })\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        case UPDATE_CITY:\n            return {\n                ...state,\n                regions: state.regions.map(currentRegion => {\n                    if (currentRegion._id === regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: currentRegion.countries.map(currentCountry => {\n                                if (currentCountry._id === countryId) {\n                                    return {\n                                        ...currentCountry,\n                                        cities: currentCountry.cities.map(currentCity => (currentCity._id === city._id ? { ...currentCity, name: city.name } : currentCity))\n                                    }\n                                } else {\n                                    return currentCountry\n                                }\n                            })\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        case DELETE_CITY:\n            return {\n                ...state,\n                regions: state.regions.map(currentRegion => {\n                    if (currentRegion._id === regionId) {\n                        return {\n                            ...currentRegion,\n                            countries: currentRegion.countries.map(currentCountry => {\n                                if (currentCountry._id === countryId) {\n                                    return {\n                                        ...currentCountry,\n                                        cities: currentCountry.cities.filter(currentCity => (currentCity._id !== cityId))\n                                    }\n                                } else {\n                                    return currentCountry\n                                }\n                            })\n                        }\n                    } else {\n                        return currentRegion\n                    }\n                })\n            }\n        default: return state\n    }\n\n}\n\nexport default regionReducer;","/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/button/Button.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/components/common/modal/Modal.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/index.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/company.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/util/localStorage.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/user.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/region.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/region.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/contact.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/api/contact.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/reducers/city.js",[],"/Users/camilo/Docs/Acamica/data-warehouse-ac/front/src/actions/city.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":20,"column":6,"nodeType":"160","endLine":20,"endColumn":12,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":28,"nodeType":"164","messageId":"165","endLine":1,"endColumn":35},{"ruleId":"162","severity":1,"message":"166","line":78,"column":12,"nodeType":"164","messageId":"165","endLine":78,"endColumn":13},{"ruleId":"167","severity":1,"message":"168","line":83,"column":22,"nodeType":"169","messageId":"170","endLine":83,"endColumn":24},{"ruleId":"167","severity":1,"message":"168","line":85,"column":29,"nodeType":"169","messageId":"170","endLine":85,"endColumn":31},{"ruleId":"167","severity":1,"message":"168","line":87,"column":29,"nodeType":"169","messageId":"170","endLine":87,"endColumn":31},{"ruleId":"167","severity":1,"message":"168","line":89,"column":29,"nodeType":"169","messageId":"170","endLine":89,"endColumn":31},{"ruleId":"158","severity":1,"message":"159","line":102,"column":8,"nodeType":"160","endLine":102,"endColumn":10,"suggestions":"171"},{"ruleId":"167","severity":1,"message":"168","line":118,"column":19,"nodeType":"169","messageId":"170","endLine":118,"endColumn":21},{"ruleId":"167","severity":1,"message":"168","line":192,"column":67,"nodeType":"169","messageId":"170","endLine":192,"endColumn":69},{"ruleId":"167","severity":1,"message":"168","line":211,"column":58,"nodeType":"169","messageId":"170","endLine":211,"endColumn":60},{"ruleId":"172","severity":1,"message":"173","line":255,"column":21,"nodeType":"174","endLine":255,"endColumn":105},{"ruleId":"172","severity":1,"message":"173","line":258,"column":21,"nodeType":"174","endLine":258,"endColumn":143},{"ruleId":"172","severity":1,"message":"173","line":267,"column":157,"nodeType":"174","endLine":267,"endColumn":216},{"ruleId":"172","severity":1,"message":"173","line":268,"column":189,"nodeType":"174","endLine":268,"endColumn":248},{"ruleId":"172","severity":1,"message":"173","line":269,"column":189,"nodeType":"174","endLine":269,"endColumn":248},{"ruleId":"172","severity":1,"message":"173","line":270,"column":164,"nodeType":"174","endLine":270,"endColumn":223},{"ruleId":"172","severity":1,"message":"173","line":271,"column":172,"nodeType":"174","endLine":271,"endColumn":231},{"ruleId":"158","severity":1,"message":"175","line":62,"column":12,"nodeType":"160","endLine":62,"endColumn":23,"suggestions":"176"},{"ruleId":"158","severity":1,"message":"159","line":66,"column":8,"nodeType":"160","endLine":66,"endColumn":10,"suggestions":"177"},{"ruleId":"158","severity":1,"message":"159","line":70,"column":7,"nodeType":"160","endLine":70,"endColumn":9,"suggestions":"178"},{"ruleId":"158","severity":1,"message":"179","line":58,"column":12,"nodeType":"160","endLine":58,"endColumn":19,"suggestions":"180"},{"ruleId":"158","severity":1,"message":"159","line":62,"column":8,"nodeType":"160","endLine":62,"endColumn":10,"suggestions":"181"},{"ruleId":"158","severity":1,"message":"182","line":106,"column":8,"nodeType":"160","endLine":106,"endColumn":17,"suggestions":"183"},{"ruleId":"158","severity":1,"message":"159","line":110,"column":8,"nodeType":"160","endLine":110,"endColumn":10,"suggestions":"184"},{"ruleId":"162","severity":1,"message":"185","line":1,"column":88,"nodeType":"164","messageId":"165","endLine":1,"endColumn":112},{"ruleId":"167","severity":1,"message":"168","line":75,"column":43,"nodeType":"169","messageId":"170","endLine":75,"endColumn":45},"no-native-reassign",["186"],"no-negated-in-lhs",["187"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["188"],"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["189"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useMemo has missing dependencies: 'changeToUpdateUser' and 'dispatch'. Either include them or remove the dependency array.",["190"],["191"],["192"],"React Hook useMemo has missing dependencies: 'changeToUpdateUser', 'dispatch', and 'user.admin'. Either include them or remove the dependency array.",["193"],["194"],"React Hook useMemo has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["195"],["196"],"'DELETE_SELECTED_CONTACTS' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"199","fix":"203"},{"desc":"199","fix":"204"},{"desc":"205","fix":"206"},{"desc":"199","fix":"207"},{"desc":"208","fix":"209"},{"desc":"199","fix":"210"},"Update the dependencies array to be: [dispatch, user]",{"range":"211","text":"212"},"Update the dependencies array to be: [dispatch]",{"range":"213","text":"214"},"Update the dependencies array to be: [changeToUpdateUser, companies, dispatch]",{"range":"215","text":"216"},{"range":"217","text":"214"},{"range":"218","text":"214"},"Update the dependencies array to be: [changeToUpdateUser, dispatch, user.admin, users]",{"range":"219","text":"220"},{"range":"221","text":"214"},"Update the dependencies array to be: [dispatch, regions]",{"range":"222","text":"223"},{"range":"224","text":"214"},[786,792],"[dispatch, user]",[3000,3002],"[dispatch]",[2687,2698],"[changeToUpdateUser, companies, dispatch]",[2763,2765],[2826,2828],[2582,2589],"[changeToUpdateUser, dispatch, user.admin, users]",[2650,2652],[5784,5793],"[dispatch, regions]",[5856,5858]]